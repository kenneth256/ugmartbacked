// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         Role      @default(USER)
  refreshToken String?
  cart         Cart?
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  wishlist     Wishlist?
}

enum Role {
  USER
  SUPER_ADMIN
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Float
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  description String
  stock       Int
  brand       String?
  color       Json?
  soldCount   Int         @default(0)
  sizes       Json?
  gender      String?
  rating      Float?      @default(0)
  images      Json?
  isFeatured  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
}

model Coupon {
  id         String   @id @default(cuid())
  code       String   @unique
  percentage Float
  startDate  DateTime
  endDate    DateTime
  usageLimit Int
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]
}

model FeaturedBanner {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productID String
  product   Product  @relation(fields: [productID], references: [id], onDelete: Cascade)
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productID, color, size], name: "cartId_productID_color_size")
  @@index([productID])
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  name        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     String
  district    String
  subcounty   String
  village     String
  phonenumber String
  email       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  @@index([userId])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  addressId     String
  couponId      String?
  totalAmount   Float
  status        OrderStatus   @default(PENDING)
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       Address       @relation(fields: [addressId], references: [id], onDelete: Restrict)
  coupon        Coupon?       @relation(fields: [couponId], references: [id], onDelete: SetNull)
  items         OrderItem[]
  payment       Payment?

  @@index([userId])
  @@index([addressId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  productName String   
  quantity    Int
  price       Float
  size        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category String
  @@index([orderId])
  @@index([productId])
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount          Float
  paymentMethod   String
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([orderId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}